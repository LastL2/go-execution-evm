// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/execution.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExecutionService_EngineNewPayloadV1_FullMethodName        = "engine_newPayloadV1"
	ExecutionService_EngineForkchoiceUpdatedV1_FullMethodName = "engine_forkchoiceUpdatedV1"
	ExecutionService_EngineGetPayloadV1_FullMethodName        = "engine_getPayloadV1"
)

// ExecutionServiceClient is the client API for ExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutionServiceClient interface {
	// engine_newPayloadV1 RPC method.
	EngineNewPayloadV1(ctx context.Context, in *ExecutionPayloadV1, opts ...grpc.CallOption) (*PayloadStatusV1, error)
	// engine_forkchoiceUpdatedV1 RPC method.
	EngineForkchoiceUpdatedV1(ctx context.Context, in *ForkchoiceUpdatedRequestV1, opts ...grpc.CallOption) (*ForkchoiceUpdatedResponseV1, error)
	// engine_getPayloadV1 RPC method.
	EngineGetPayloadV1(ctx context.Context, in *GetPayloadRequestV1, opts ...grpc.CallOption) (*ExecutionPayloadV1, error)
}

type executionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionServiceClient(cc grpc.ClientConnInterface) ExecutionServiceClient {
	return &executionServiceClient{cc}
}

func (c *executionServiceClient) EngineNewPayloadV1(ctx context.Context, in *ExecutionPayloadV1, opts ...grpc.CallOption) (*PayloadStatusV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayloadStatusV1)
	err := c.cc.Invoke(ctx, ExecutionService_EngineNewPayloadV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionServiceClient) EngineForkchoiceUpdatedV1(ctx context.Context, in *ForkchoiceUpdatedRequestV1, opts ...grpc.CallOption) (*ForkchoiceUpdatedResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForkchoiceUpdatedResponseV1)
	err := c.cc.Invoke(ctx, ExecutionService_EngineForkchoiceUpdatedV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionServiceClient) EngineGetPayloadV1(ctx context.Context, in *GetPayloadRequestV1, opts ...grpc.CallOption) (*ExecutionPayloadV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutionPayloadV1)
	err := c.cc.Invoke(ctx, ExecutionService_EngineGetPayloadV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionServiceServer is the server API for ExecutionService service.
// All implementations must embed UnimplementedExecutionServiceServer
// for forward compatibility.
type ExecutionServiceServer interface {
	// engine_newPayloadV1 RPC method.
	EngineNewPayloadV1(context.Context, *ExecutionPayloadV1) (*PayloadStatusV1, error)
	// engine_forkchoiceUpdatedV1 RPC method.
	EngineForkchoiceUpdatedV1(context.Context, *ForkchoiceUpdatedRequestV1) (*ForkchoiceUpdatedResponseV1, error)
	// engine_getPayloadV1 RPC method.
	EngineGetPayloadV1(context.Context, *GetPayloadRequestV1) (*ExecutionPayloadV1, error)
	mustEmbedUnimplementedExecutionServiceServer()
}

// UnimplementedExecutionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExecutionServiceServer struct{}

func (UnimplementedExecutionServiceServer) EngineNewPayloadV1(context.Context, *ExecutionPayloadV1) (*PayloadStatusV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EngineNewPayloadV1 not implemented")
}
func (UnimplementedExecutionServiceServer) EngineForkchoiceUpdatedV1(context.Context, *ForkchoiceUpdatedRequestV1) (*ForkchoiceUpdatedResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EngineForkchoiceUpdatedV1 not implemented")
}
func (UnimplementedExecutionServiceServer) EngineGetPayloadV1(context.Context, *GetPayloadRequestV1) (*ExecutionPayloadV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EngineGetPayloadV1 not implemented")
}
func (UnimplementedExecutionServiceServer) mustEmbedUnimplementedExecutionServiceServer() {}
func (UnimplementedExecutionServiceServer) testEmbeddedByValue()                          {}

// UnsafeExecutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionServiceServer will
// result in compilation errors.
type UnsafeExecutionServiceServer interface {
	mustEmbedUnimplementedExecutionServiceServer()
}

func RegisterExecutionServiceServer(s grpc.ServiceRegistrar, srv ExecutionServiceServer) {
	// If the following call pancis, it indicates UnimplementedExecutionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExecutionService_ServiceDesc, srv)
}

func _ExecutionService_EngineNewPayloadV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionPayloadV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServiceServer).EngineNewPayloadV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionService_EngineNewPayloadV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServiceServer).EngineNewPayloadV1(ctx, req.(*ExecutionPayloadV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionService_EngineForkchoiceUpdatedV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkchoiceUpdatedRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServiceServer).EngineForkchoiceUpdatedV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionService_EngineForkchoiceUpdatedV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServiceServer).EngineForkchoiceUpdatedV1(ctx, req.(*ForkchoiceUpdatedRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionService_EngineGetPayloadV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayloadRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServiceServer).EngineGetPayloadV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionService_EngineGetPayloadV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServiceServer).EngineGetPayloadV1(ctx, req.(*GetPayloadRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionService_ServiceDesc is the grpc.ServiceDesc for ExecutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "execution.v1.ExecutionService",
	HandlerType: (*ExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "engine_newPayloadV1",
			Handler:    _ExecutionService_EngineNewPayloadV1_Handler,
		},
		{
			MethodName: "engine_forkchoiceUpdatedV1",
			Handler:    _ExecutionService_EngineForkchoiceUpdatedV1_Handler,
		},
		{
			MethodName: "engine_getPayloadV1",
			Handler:    _ExecutionService_EngineGetPayloadV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/execution.proto",
}
